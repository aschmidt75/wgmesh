syntax = "proto3";

package meshservice;

option go_package = "github.com/aschmidt75/wgmesh/meshservice";

service Mesh {
    // Joining node starts to shake hands and receives a token and
    // additional authorization requirements
    rpc ShakeHands(HandshakeRequest) returns (HandshakeResponse) {}

    // BeginJoin begins the join process by sending a JoinRequest
    // and receiving a JoinResponse with setup details
    rpc Join(JoinRequest) returns (JoinResponse) {}

    // Peers returns a stream of all peers currently connected to the mesh
    rpc Peers(Empty) returns (stream Peer) {}
}

message Empty {

}

message HandshakeRequest {
    // name of mesh to join
    string meshName = 1;
}

message HandshakeResponse {
    enum Result {
        OK = 0;
        ERROR = 1;
    }
    Result result = 1;
    string errorMessage = 2;

    // token which joining node has to reuse when using Join/Peers methods
    string joinToken = 3;

    // additional authorization requirements which joining nodes have to fulfil
    map<string,string> authzReqs = 4;
}


message JoinRequest {
    // wireguard: public key of joining node
    string pubkey = 1;

    // wireguard: endpoint IP of joining node
    string endpointIP = 2;

    // wireguard: endpoint UDP port of joining node
    int32 endpointPort = 3;

    // name of mesh to join
    string meshName = 4;

    // optional name of node
    string nodeName = 5;

    // NAT mode
    bool nat = 6;
}

message JoinResponse {
    enum Result {
        OK = 0;
        ERROR = 1;
    }
    Result result = 1;
    string errorMessage = 2;

    // this will be the joining's mesh ip
    string joiningNodeMeshIP = 3;

    // cidr of the mesh
    string meshCidr = 4;

    // creation time stamp
    int64 creationTS = 5;

    // encryption key for serf gossip protocol
    string serfEncryptionKey = 6;

    // use serf LAN configuration (true) or WAN configuration (false)
    bool serfModeLAN = 7;
}

message LeaveRequest {
    string pubkey = 1;
}

message LeaveResponse {
    enum Result {
        OK = 0;
        ERROR = 1;
    }
    Result result = 1;
    string errorMessage = 2;
}

// mesh-internal message formats via serf user events

// Peer contains connection data for an individual
// Wireguard Peer
message Peer {
    enum AnnouncementType {
        JOIN = 0;
        LEAVE = 1;
    }
    AnnouncementType type = 1;
    string pubkey = 2;              // public key
    string endpointIP = 3;          // endpoint
    int32 endpointPort = 4;         // endpoint
    string meshIP = 5;              // internal mesh ip
}

message RTTRequest {
    string requestedBy = 1;     // node name
}

message RTTResponseInfo {
    string node = 1;     // node name
    int32 rttMsec = 2;
}
message RTTResponse {
    string node = 1;     // node name
    repeated RTTResponseInfo rtts = 2;
}